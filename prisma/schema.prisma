generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  role      String    @default("customer") @db.VarChar(20)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  cart      Cart?
  orders    Order[]

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  description String?    @db.Text
  price       Float
  imageUrl    String?    @map(name: "image_url") @db.VarChar(255)
  categoryId  Int        @map(name: "category_id")
  category    Category   @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime?  @updatedAt @map(name: "updated_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map(name: "user_id")
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime?  @updatedAt @map(name: "updated_at")

  @@map("carts")
}

model CartItem {
  id        Int       @id @default(autoincrement())
  cartId    Int       @map(name: "cart_id")
  cart      Cart      @relation(fields: [cartId], references: [id])
  productId Int       @map(name: "product_id")
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int       @default(1)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  @@unique([cartId, productId])
  @@map("cart_items")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          Int           @map(name: "user_id")
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          String        @default("pending") @db.VarChar(50)
  total           Float
  shippingAddress String?       @map(name: "shipping_address") @db.Text
  paymentMethod   String?       @map(name: "payment_method") @db.VarChar(50)
  paymentStatus   PaymentStatus @default(PENDING) @map(name: "payment_status")
  stripeSessionId String?       @unique @map(name: "stripe_session_id") @db.VarChar(255)
  paymentIntentId String?       @unique @map(name: "payment_intent_id") @db.VarChar(255)
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  updatedAt       DateTime?     @updatedAt @map(name: "updated_at")

  @@map("orders")
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int       @map(name: "order_id")
  order     Order     @relation(fields: [orderId], references: [id])
  productId Int       @map(name: "product_id")
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int       @default(1)
  price     Float
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  @@map("order_items")
}
